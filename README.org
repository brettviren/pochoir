#+title: Solve field response with FDM
#+EXPORT_FILE_NAME: index.html

* Overview

This package solves for /field responses/ which model current induced in
electrodes by electric charge (eg, electrons from ionization) drifting
due to potentials applied to the electrodes.

** High level structure

The overall solution is factored into a number of core sub-problems:

- Laplace boundary value problems in 2D and 3D using the
  finite-difference method (FDM) to determine the electrostatic
  potential fields from the applied and the "weighting" electrode
  voltages.
- Initial value problem to determine paths of charge drift in the
  applied potential.
- Application of the [[https://en.wikipedia.org/wiki/Shockley%E2%80%93Ramo_theorem][Shockley-Ramo theorem]] to combine the above
  solutions to get currents induced in electrodes.

** Usage patterns

The ~pochoir~ package provides a Python3 module and command line
interface.  

An overall problem is solved by connecting subproblems as nodes in
graph joined by edges passing data.  When using the CLI, these edges
may be provided by data in individual Numpy ~.npz~ files or as datasets
in an HDF5 file.

When using the ~pochoir~ Python module, data is in the form of Numpy
arrays or PyTorch tensors and building a full solution from parts is
left to the application.

** The name

The core Laplace problems are solved in ~pochoir~ with FDM.  The core
operation of FDM is sometimes described as a "stencil" convolution.
The name /pochoir/ describes a stencil-based art style.  No constraint
is intended on your personal [[https://www.google.com/search?q=pronounce+pochoir][pronunciation of "pochoir"]].

* Install

~pochoir~ installs in the "usual Python way".  Use of ~pip~ and a Python
virtual environment is recommended.  

Eg:

#+begin_example
python3 -m venv venv
source venv/bin/activiate
#+end_example

Or maybe you prefer ~direnv~

#+begin_example
echo layout python3 > .envrc
direnv allow
#+end_example

Then install either for use:

#+begin_example
pip install git+https://github.com/brettviren/pochoir.git@HEAD
#+end_example

Or for development

#+begin_example
git clone git@github.com:brettviren/pochoir.git
cd pochoir
pip install -e .
#+end_example

Additional commands may be needed to allow PyTorch to use your GPU.


* Usage

#+begin_src shell :exports both :results output code :wrap example
pochoir
#+end_src

#+RESULTS:
#+begin_example
Usage: pochoir [OPTIONS] COMMAND [ARGS]...

  pochoir command line interface

Options:
  -s, --store PATH         File for primary data storage (input and maybe
                           output)

  -o, --outstore PATH      File for output (primary only input)
  -d, --device [cpu|cuda]  Set device on which to calculate
  --help                   Show this message and exit.

Commands:
  domain       Produce a domain array and store to output dataset.
  example      Generate a boundary and initial array example
  fdm          Solve a Laplace boundary value problem with finite
               difference...

  grad         Calculate the gradient of a scalar field.
  plot-image   Visualize a dataset as 2D image
  plot-quiver  Visualize a 2D or 3D vector field as a "quiver" plot.
  version      Print the version
#+end_example


** Store

~pochoir~ has an idea of a "data store" to hold output from one command
to use as input to another.  The store may be an HDF5 file or a
directory of NPZ files (equivalent to HDF5 datasets) and JSON files
(equivalent to HDF5 metadata).

The store may be given on the command line:

#+begin_example
pochoir -s /path/to/store      [command] [...]
pochoir -s /path/to/store.hdf  [command] [...]
#+end_example

A store may also be given in an environment variable.

#+begin_example
export POCHOIR_STORE=/path/to/store
#+end_example

