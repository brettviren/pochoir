#+title: Solve field response with FDM
#+EXPORT_FILE_NAME: index.html

* Overview

This package solves for /field responses/ which model current induced in
electrodes by electric charge drifting in an applied field.  

** High level structure

The overall solution is factored into a number of core sub-problems:

- Laplace boundary value problems in 2D and 3D using the
  finite-difference method (FDM) to determine the electrostatic
  potential fields from the applied and the "weighting" electrode
  voltages.
- Initial value problem to determine paths of charge drift in the
  applied potential.
- Application of the [[https://en.wikipedia.org/wiki/Shockley%E2%80%93Ramo_theorem][Shockley-Ramo theorem]] to combine the above
  solutions to get currents induced in electrodes.

** Usage patterns

A ~pochoir~ Python3 module and command line interface is provided.  An
overall problem is solved by connecting subproblems as nodes in graph
joined by edges passing data.  When using the CLI, these edges may be
provided by files, with Numpy ~.npz~ and HDF5 formats supported.  If
using the ~pochoir~ Python module, data is in the form of Numpy arrays
or PyTorch tensors.

** The name

The core problems are solved in pochoir with FDM.  The core operation
of FDM is often described as a "stencil" convolution.  The name
/pochoir/ describes a stencil-based art style.  This package places no
constraint on your personal [[https://www.google.com/search?q=pronounce+pochoir][pronunciation of "pochoir"]].

* Install

~pochoir~ installs in the "usual Python way".  Use of ~pip~ and a Python
virtual environment is recommended.  

Eg:

#+begin_example
python3 -m venv venv
source venv/bin/activiate
#+end_example

Or maybe you prefer ~direnv~

#+begin_example
echo layout python3 > .envrc
direnv allow
#+end_example

Then install either for use:

#+begin_example
pip install git+https://github.com/brettviren/pochoir.git@HEAD
#+end_example

Or for development

#+begin_example
git clone git@github.com:brettviren/pochoir.git
cd pochoir
pip install -e .
#+end_example

Additional commands may be needed to allow PyTorch to use your GPU.

* Usage

*Note* these instructions are out of date

Set up environment as above

#+begin_src shell :exports both :results output code :wrap example
python stencil2d.py numpy 500
#+end_src

#+RESULTS:
#+begin_example
Using numpy
500 steps
100: maxerr:16.50219718185417 dt:1.6942028999328613
200: maxerr:6.381780701032994 dt:3.3686211109161377
300: maxerr:3.2621827043574285 dt:5.0668885707855225
400: maxerr:2.3078917452478436 dt:6.760533094406128
nsteps:500 dt:8.43262529373169s (59.3 Hz)
saving stencil2d-500-numpy.npz
printing stencil2d-500-numpy.pdf
#+end_example

If PyTorch is working for you:

#+begin_src shell :exports both :results output code :wrap example
python stencil2d.py torch 500
#+end_src

#+RESULTS:
#+begin_example
Using torch
500 steps
100: maxerr:16.5023193359375 dt:0.2192213535308838
200: maxerr:6.3817138671875 dt:0.4364333152770996
300: maxerr:3.26220703125 dt:0.6530659198760986
400: maxerr:2.30792236328125 dt:0.8703389167785645
nsteps:500 dt:1.0253400802612305s (487.6 Hz)
saving stencil2d-500-torch.npz
printing stencil2d-500-torch.pdf
#+end_example

Timing above is on i7-9750H CPU @ 2.60GHz, GeForce GTX 1650 Mobile /
Max-Q.  Here are two more runs on a 3080Ti:

#+begin_example
nsteps:500 dt:0.32015228271484375s (1561.8 Hz)
nsteps:50000 dt:21.91097593307495s (2282.0 Hz)
#+end_example

Default 50k steps gives solution:

[[file:stencil2d-50000-torch-solution.png]]

And an "error" (log10 absolute difference with prior step)

[[file:stencil2d-50000-torch-error.png]]

