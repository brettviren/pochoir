#!/usr/bin/env snakemake
# -*- snakemake -*-

store="test-sandh2d-store"
plots="test-sandh2d-plots"

DOMAINS = ['drift', 'width']
# fixme: generate fdm as .json config...
FIELDS = {
    'weight-ind': {
        "domain": "weight",
        "fdm": dict(
            nepochs = 100,
            epoch = 100,
            prec = 0.01,
            edges = "fixed,periodic"
        ),
    },
    'weight-col': {
        "domain": "weight",
    },
    'drift': {
        "domain": "drift",
    }
}


WFIELDS = [n for n,d in FIELDS.items() if d['domain'] == 'weight']
DFIELDS = [n for n,d in FIELDS.items() if d['domain'] == 'drift']

TAXONS = ['initial', 'boundary', 'potential', 'increment']
VALUE_TAXONS = ['initial', 'potential', 'increment']

rule configs:
    input:
        "test/test-sandh2d.jsonnet"
    output:
        f'{store}/domains/drift.json',
        f'{store}/domains/weight.json',
        f'{store}/gencfg/drift.json',
        f'{store}/gencfg/weight-col.json',
        f'{store}/gencfg/weight-ind.json'
    shell: '''
    pochoir gencfg -m {store} {input}
    '''

rule gen:
    input:
        lambda w: '{store}/domains/{domain}.json'.format(store=store, **FIELDS[w.field])
    output:
        iva = f'{store}/initial/{{field}}.npz',
        bva = f'{store}/boundary/{{field}}.npz'
    shell: '''
    pochoir --store {store} \
    gen --generator sandh2d --domain {input} \
    --initial {output.iva} \
    --boundary {output.bva} \
    {store}/{wildcards.field}.json 
    '''



def fdm_cfg(w):
    fname = '{store}/{field}.json'.format(store=store, field=w.field)
    return json.loads(open(fname).read())['fdm']

rule fdm:
    input:
        cfg = lambda w: '{store}/domains/{domain}.json'.format(store=store, **FIELDS[w.field]),
        iva = f'{store}/initial/{{field}}.npz',
        bva = f'{store}/boundary/{{field}}.npz'
    output:
        pot = f'{store}/potential/{{field}}.npz',
        inc = f'{store}/increment/{{field}}.npz'
    params:
        p = fdm_cfg,
        engine = "cupy"
    shell: '''
    pochoir --store {store} \
    fdm --engine {params.engine} \
    --nepochs {params.p[nepochs]} --epoch {params.p[epoch]} \
    --precision {params.p[prec]} --edges {params.p[edges]} \
    --initial {input.iva} --boundary {input.bva} \
    --potential {output.pot} --increment {output.inc}
    '''

rule field_grad:
    input:
        f'{store}/potential/{{field}}.npz'
    output:
        arr = f'{store}/potential/{{field}}-mag.npz',
        plt = f'{plots}/potential/{{field}}-mag.png'
    shell: '''
    pochoir --store {store} grad -s {input} -G {output.arr}; \
    pochoir --store {store} plot-mag -a {output.arr} -o {output.plt}
    '''

rule plots_linear:
    input:
        f'{store}/{{taxon}}/{{field}}.npz'
    output:
        f'{plots}/{{taxon}}/{{field}}-linear.png'
    shell: '''
    pochoir --store {store} plot-image -s linear -a {input} -o {output}
    '''

rule plots_signedlog:
    input:
        f'{store}/{{taxon}}/{{field}}.npz'
    output:
        f'{plots}/{{taxon}}/{{field}}-signedlog.png'
    shell: '''
    pochoir --store {store} plot-image -s signedlog -a {input} -o {output}
    '''

rule velo:
    input:
        f'{store}/potential/{{field}}.npz'
    output:
        f'{store}/velocity/{{field}}.npz'
    params:
        temperature = '89*K'
    shell: """
    pochoir --store {store}  velo \
    --temperature {params.temperature} \
     --potential {input} \
     --velocity {output}
    """

rule plot_velo:
    input:
        f'{store}/velocity/{{field}}.npz'            
    output:
        quiver = f'{plots}/velocity/{{field}}-quiver.png',
        mag = f'{plots}/velocity/{{field}}-mag.png'
    shell: '''
    pochoir --store {store} plot-quiver --ylim '15,22' \
        -a {input} -o {output.quiver}; \
    pochoir --store {store} plot-mag \
        -a {input} -o {output.mag} -u "mm/us"
    '''

rule drift:
    input:
        f'{store}/velocity/{{field}}.npz'
    output:
        starts = f'{store}/starts/{{field}}.npz',
        paths = f'{store}/paths/{{field}}.npz'
    params:
        starts = '199.9*mm,0*mm',
        steps = '0*us,200*us,0.1*us'
    shell: '''
    pochoir --store {store} starts --starts {output.starts} {params.starts} ;
    pochoir --store {store} drift --starts {output.starts} \
    --velocity {input} --paths {output.paths} {params.steps}
    '''
    


def all_rule():
    return (rules.configs.output,
            expand(rules.gen.output,
                   domain=["drift"], field=DFIELDS),
            expand(rules.gen.output,
                   domain=["weight"], field=WFIELDS),
            expand(rules.fdm.output, field=FIELDS),
            expand(rules.plots_linear.output,
                   field=FIELDS, taxon=TAXONS),
            expand(rules.plots_signedlog.output,
                   field=FIELDS, taxon=VALUE_TAXONS),
            expand(rules.velo.output, field=["drift"]),
            expand(rules.plot_velo.output, field=["drift"]),
            expand(rules.drift.output, field=["drift"]),
            )


rule all:
    input: all_rule()

