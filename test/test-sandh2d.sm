#!/usr/bin/env snakemake
# -*- snakemake -*-

store="test-sandh2d-store"
plots="test-sandh2d-plots"

ENGINES = ['torch','cupy', 'numpy', 'numba', 'cumba']

DOMAINS = ['drift', 'width']
FIELDS = {
    'weight-ind': {
        "domain": "weight",
    },
    'weight-col': {
        "domain": "weight",
    },
    'drift': {
        "domain": "drift",
    }
}
WFIELDS = [n for n,d in FIELDS.items() if d['domain'] == 'weight']
DFIELDS = [n for n,d in FIELDS.items() if d['domain'] == 'drift']

TAXONS = ['initial', 'boundary', 'potential', 'increment']
VALUE_TAXONS = ['initial', 'potential', 'increment']

rule configs:
    input:
        "test/test-sandh2d.jsonnet"
    output:
        f'{store}/domains/drift.json',
        f'{store}/domains/weight.json'
    shell: '''
    mkdir -p {store}/domains ;
    jsonnet -m {store} {input}
    '''

rule gen:
    input:
        lambda w: '{store}/domains/{domain}.json'.format(store=store, **FIELDS[w.field])
    output:
        iva = f'{store}/{{engine}}/initial/{{field}}.npz',
        bva = f'{store}/{{engine}}/boundary/{{field}}.npz'
    shell: '''
    pochoir --store {store} \
    gen --generator sandh2d --domain {input} \
    --initial {output.iva} \
    --boundary {output.bva} \
    {store}/{wildcards.field}.json 
    '''

rule fdm:
    input:
        iva = f'{store}/{{engine}}/initial/{{field}}.npz',
        bva = f'{store}/{{engine}}/boundary/{{field}}.npz'
    output:
        pot = f'{store}/{{engine}}/potential/{{field}}.npz',
        inc = f'{store}/{{engine}}/increment/{{field}}.npz'
    params:
        nepochs = 100,
        epoch = 100,
        prec = 0.01,
        edges = "fixed,periodic"

    shell: '''
    pochoir --store {store} \
    fdm --engine {wildcards.engine} \
    --nepochs {params.nepochs} --epoch {params.epoch} \
    --precision {params.prec} --edges {params.edges} \
    --initial {input.iva} --boundary {input.bva} \
    --potential {output.pot} --increment {output.inc}
    '''

rule plots_linear:
    input:
        f'{store}/{{engine}}/{{taxon}}/{{field}}.npz'
    output:
        f'{plots}/{{engine}}/{{taxon}}/{{field}}-linear.png'
    shell: '''
    pochoir --store {store} plot-image -s linear -a {input} -o {output}
    '''

rule plots_signedlog:
    input:
        f'{store}/{{engine}}/{{taxon}}/{{field}}.npz'
    output:
        f'{plots}/{{engine}}/{{taxon}}/{{field}}-signedlog.png'
    shell: '''
    pochoir --store {store} plot-image -s signedlog -a {input} -o {output}
    '''

rule velo:
    input:
        f'{store}/{{engine}}/potential/{{field}}.npz'
    output:
        f'{store}/{{engine}}/velocity/{{field}}.npz'
    params:
        temperature = '89*K'
    shell: """
    pochoir --store {store}  velo \
    --temperature {params.temperature} \
     --potential {input} \
     --velocity {output}
    """

rule plot_velo:
    input:
        f'{store}/{{engine}}/velocity/{{field}}.npz'            
    output:
        quiver = f'{plots}/{{engine}}/velocity/{{field}}-quiver.png'
    shell: '''
    pochoir plot-quiver --ylim '15,22' -a {input} -o {output.quiver}
    '''

rule drift:
    input:
        f'{store}/{{engine}}/velocity/{{field}}.npz'
    output:
        starts = f'{store}/{{engine}}/starts/{{field}}.npz',
        paths = f'{store}/{{engine}}/paths/{{field}}.npz'
    params:
        starts = '199.9*mm,0*mm',
        steps = '0*us,200*us,0.1*us'
    shell: '''
    pochoir --store {store} starts --starts {output.starts} {params.starts} ;
    pochoir --store {store} drift --starts {output.starts} \
    --velocity {input} --paths {output.paths} {params.steps}
    '''
    


def all_rule(engines=None):
    if engines is None:
        engines=["numpy"]
    drift_engines = list()
    for maybe in ["numpy", "torch"]:
        if maybe in engines:
            drift_engines.append(maybe)

    return (rules.configs.output,
            expand(rules.gen.output, domain=["drift"],
                   field=DFIELDS, engine=engines),
            expand(rules.gen.output, domain=["weight"],
                   field=WFIELDS, engine=engines),
            expand(rules.fdm.output, field=FIELDS, engine=engines),
            expand(rules.plots_linear.output,
                   field=FIELDS, engine=engines, taxon=TAXONS),
            expand(rules.plots_signedlog.output,
                   field=FIELDS, engine=engines, taxon=VALUE_TAXONS),
            expand(rules.velo.output, field=["drift"], engine=["numpy"]),
            expand(rules.plot_velo.output, field=["drift"], engine=["numpy"]),
            expand(rules.drift.output, field=["drift"], engine=drift_engines),
            )

rule all_numpy:
    input: all_rule(["numpy"])

rule all:
    input: all_rule()

