#!/usr/bin/env snakemake
'''
Snakemake automation of tutorial.

Taxonomy:

 - domain :: name of 2D or 3D array grid
 - field :: name of an E-field or W-field

'''

import os
import json

store_dir = os.environ.get("POCHOIR_STORE", "store")

DOMAINS = json.load(open("cfgs/domains.json"))
FIELDS = json.load(open("cfgs/fields.json"))


domain_cfg_p = 'cfgs/domain-{domain}.json'
domain_p = f'{store_dir}/domains/{{domain}}/'

field_cfg_p = 'cfgs/field-{field}.json'
initial_p = f'{store_dir}/initial/{{field}}.npz'
boundary_p = f'{store_dir}/boundary/{{field}}.npz'
fdmsol_p = f'{store_dir}/fdmsol/{{field}}.npz'
fdmerr_p = f'{store_dir}/fdmerr/{{field}}.npz'

def domain_config(w):
    cfg = json.load(open(domain_cfg_p.format(domain=w.domain)))
    return ' '.join(['--{k} {v}'.format(k=k,v=v) for k,v in cfg.items()])

rule domain:
    input:
        domain_cfg_p
    output:
        directory(domain_p)
    params:
        domain_config
    shell: """
    pochoir domain {params} {output}
    """

rule all_domains:
    input:
        expand(rules.domain.output, domain=DOMAINS)

def field_domain(w):
    return domain_p.format(**FIELDS[w.field])
def field_generator(w):
    return FIELDS[w.field]['generator']

rule fieldinit:
    input:
        dom = field_domain,
        cfg = field_cfg_p
    output:
        iva = initial_p,
        bva = boundary_p
    params:
        gen = field_generator
    shell: """
    pochoir gen -g {params.gen} \
       -d {input.dom} -i {output.iva} -b {output.bva} \
      {input.cfg}
    """

def fieldfdm_config(w):
    cfg = FIELDS[w.field]['fdmcfg']
    return ' '.join(['--{k} {v}'.format(k=k,v=v) for k,v in cfg.items()])


rule fieldfdm:
    input:
        iva = initial_p,
        bva = boundary_p
    params:
        fieldfdm_config
    output:
        sol = fdmsol_p,
        err = fdmerr_p,
    shell: """
    pochoir fdm {params} -b {input.bva} -i {input.iva} \
      {output.sol} {output.err}
    """
        

rule all_fields:
    input:
        expand(rules.fieldinit.output, field=FIELDS),
        expand(rules.fieldfdm.output, field=FIELDS)
    
